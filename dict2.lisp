(defpackage :dict
  (:use :common-lisp :eql)
  (:export
   #:start))
   
(in-package :dict)

(setf *break-on-errors* t) ; see (documentation 'eql:*break-on-errors* 'variable)

(defvar *dict* nil)
(defvar *words* nil)

(defvar *mainwindow* (qnew "QMainWindow"))
(defvar *window* (qnew "QTabWidget"))
(defvar *lay-widg1* (qnew "QWidget"))
(defvar *lay1* (qnew "QGridLayout"))
(defvar *word-list* (qnew "QListWidget"))
;(defvar *word-list-redacted* (qnew "QListView"))
(defvar *word-meaning* (qnew "QLabel"))
(defvar *word-type* (qnew "QLineEdit"))
(defvar *suggest*)
(defvar *action-edit* (qnew "QAction(QString,QObject*)" "Edit" *word-list*))
(defvar *action-delete* (qnew "QAction(QString,QObject*)" "Delete" *word-list*))
;(defvar *action-add* (qnew "QAction(QString,QObject*)" "Add" *word-type*))
(defvar *status-label* (qnew "QLabel"))
(defvar *statusbar*)

(defvar *lay-widg-tabl* (qnew "QWidget"))
(defvar *lay-tabl* (qnew "QGridLayout"))
(defvar *dict-table* (qnew "QTableWidget"))
(defvar *list-add-but* (qnew "QPushButton"))
(defvar *list-save-but* (qnew "QPushButton"))

(defvar *addword-dialog* (qnew "QDialog"))
(defvar *addword-lay* (qnew "QVBoxLayout"))
(defvar *addword-name* (qnew "QTextEdit"))
(defvar *addword-meaning* (qnew "QTextEdit"))
(defvar *addword-example* (qnew "QTextEdit"))
(defvar *addword-ok* (qnew "QPushButton"))
(defvar *addword-cancel* (qnew "QPushButton"))
(defvar *addword-delete* (qnew "QPushButton"))
(defvar *addword-more* (qnew "QPushButton"))
(defvar *addword-ok-cancel*  (qnew "QHBoxLayout"))

(defvar *test-name* (qnew "QLabel"))
(defvar *test-meaning-group* (qnew "QButtonGroup"))
(defvar *test-layout* (qnew "QVBoxLayout"))
(defvar *test-buttons-lay* (qnew "QHBoxLayout"))
(defvar *test-next* (qnew "QPushButton"))
(defvar *test-wronged* (qnew "QPushButton"))
(defvar *lay-widg2* (qnew "QWidget"))
(qfun *test-layout* "addWidget" *test-name* 0)

(macrolet ((m ()
	   `(progn ,@(loop for var in `(*test-m1* *test-m2* *test-m3* *test-m4* *test-m5*) and num from 0 to 4
                		collect `(progn (defvar ,var (qnew "QCheckBox"))
                                  	      (qfun ,var "setFont" (qnew "QFont(QString,int,int)" "Times" 18 10))
				      (qfun *test-meaning-group* "addButton" ,var (1+ ,num))
          			      (qfun *test-layout* "addWidget" ,var (1+ ,num)))))))
          (m))

;; code for testing
(let ((testing-index)(correct-option)(wronged-indices))
  (defun test-next (from-wrongs)
    (cond ((= (qfun *test-meaning-group* "checkedId") -1)
	   (qmsg "Choose an option first !"))
	  (t (if (not (check (1- (qfun *test-meaning-group* "checkedId")))) 
		 (qmsg (concatenate 'string "<h1 style='color:crimson'>Wrong option !</h1><h2><b>" (qget *test-name* "text") "</b></h2>"
				    "<font size=20>"(correct-mean)"</font>")))
	     (qfun* (qfun *test-meaning-group* "checkedButton") "QCheckBox" "setCheckState" |Qt.Unchecked|)
	     (qfun *test-meaning-group* "buttonReleased(int)" (qfun *test-meaning-group* "checkedId"))
	     (load-test from-wrongs))))
  (defun load-test (&optional from-wronged)
    (setf testing-index 
	  (if from-wronged (nth (random (length wronged-indices)) wronged-indices)
	      (random (qfun *dict-table* "rowCount"))))
    (qset *test-name* "text" (concatenate 'string "<font size=20><b>" (getf (nth testing-index *dict*) :word) "</b></font>"))
    (setf correct-option (random 5))
    (loop for i in (list *test-m1* *test-m2* *test-m3* *test-m4* *test-m5*) and num from 0 to 4 do
	 (if (not (= num correct-option))
	     (qfun i "setText" (remove-fos (choose-any (getf (nth (random (qfun *dict-table* "rowCount")) *dict*) :meaning))))
	     (qfun i "setText" (remove-fos (choose-any (getf (nth testing-index *dict*) :meaning)))))))
  (defun remove-fos (str)
    (if (mapcan (lambda (fos) (if (string-equal str fos :end1 (min (length fos) (length str))) (list t))) '("n." "adj." "v." "adv."))
	(subseq str (+ 2 (position #\. str)))
	str))
  (defun correct-mean ()
    (getf (nth testing-index *dict*) :meaning))
  (defun check (chosen)
    (if (= correct-option chosen) t (prog1 nil (qset *test-wronged* "enabled" t) (push testing-index wronged-indices)))))
   
(defun orient3 ()
  (qfun *lay-tabl* "addWidget" *dict-table* 0 0 0 -1)
  (qfun *lay-tabl* "addWidget" *list-add-but* 1 0)
  (qfun *lay-tabl* "addWidget" *list-save-but* 1 1)
  (qfun *lay-tabl* "setRowStretch" 0 1)
  (qfun *lay-widg-tabl* "setLayout"  *lay-tabl*)
  (qset *list-save-but* "text" "Save")
  (qset *list-add-but* "text" "Add")
  (qfun *window* "addTab" *lay-widg-tabl* "Word list")
  (orient4))

(defun orient ()
  (qset *window* "minimumSize" '(600 300))
  (qfun *lay1* "addWidget" *word-type* 0 0)
  (qfun *lay1* "addWidget" *word-list* 1 0)
  (qfun *lay1* "addWidget" *word-meaning* 0 1 -1 1)
  (qfun *lay1* "setColumnStretch" 1 2)
  (qfun *lay1* "setColumnStretch" 0 1)
  (qfun *word-type* "setMaximumHeight" 30)
  (qfun *word-type* "setFont" (qnew "QFont(QString,int,int)" "Helvetica" 12 10))
  (qfun *word-meaning* "setAlignment" |Qt.AlignTop|)
  (qfun *word-meaning* "setFont" (qnew "QFont(QString,int,int)" "Times" 15 10))
  (qfun *word-meaning* "setWordWrap" t)
  (qfun *lay1* "setRowStretch" 0 0)
  (qfun *lay1* "setRowStretch" 1 1)
  (qfun *lay-widg1* "setLayout" *lay1*)
  (qfun *window* "addTab" *lay-widg1* "Learn")
  (orient3)
  (orient2))

(defun orient2 ()
  (qfun *test-buttons-lay* "addWidget" *test-next*)
  (qfun *test-buttons-lay* "addWidget" *test-wronged*)
  (qset *test-next* "text" "Next")
  (qset *test-wronged* "text" "Next from wrong responses")
  (qset *test-wronged* "enabled" nil)
  (qfun *test-layout* "addLayout" *test-buttons-lay*)
  (qfun *lay-widg2* "setLayout" *test-layout*)
  (qfun *window* "addTab" *lay-widg2* "Test"))

(defun orient4 ()
  (qfun *addword-name* "setFont" (qnew "QFont(QString,int,int,bool)" "Helvetica" 12 10 t))
  (qset *addword-example* "plainText" "Put example here")
  (qfun *addword-example* "setFont" (qnew "QFont(QString,int,int,bool)" "Times" 15 10 t))
  (qset *addword-name* "maximumHeight" 30)
  (qset *addword-meaning* "plainText" "Put multiple meanings separated with commas here")
  (qfun *addword-meaning* "setFont" (qnew "QFont(QString,int,int)" "Times" 15 10))
  (qset *addword-ok* "text" "Ok")
  (qset *addword-more* "text" "Add New")        
  (qset *addword-cancel* "text" "Cancel")
  (qset *addword-delete* "text" "Delete")
  (x:do-with (qfun *addword-ok-cancel* "addWidget")
    	*addword-ok* *addword-more* *addword-cancel* *addword-delete*)
  (x:do-with (qfun *addword-lay* "addWidget")
   	*addword-name* *addword-meaning* *addword-example*)
  (qfun *addword-lay* "addLayout" *addword-ok-cancel*)
  (qfun *addword-dialog* "setLayout" *addword-lay*)
  (qset *addword-dialog* "size" '(400 300)))


(let ((table-state)(selected-row)(cur-tab 0)(table-changed))
(defun add-this ()
  (let ((new-word (qnew "QTableWidgetItem(QString)" (qget *addword-name* "plainText")))
        (new-mean (qnew "QTableWidgetItem(QString)" (qget *addword-meaning* "plainText")))
        (new-exam (qnew "QTableWidgetItem(QString)" (qget *addword-example* "plainText"))))
     (qfun *dict-table* "setItem" selected-row 0 new-word)
     (qfun *dict-table* "setItem" selected-row 1 new-mean)
     (qfun *dict-table* "setItem" selected-row 2 new-exam)))
(defun state () (list table-state selected-row cur-tab table-changed))
(defun load-me ()
  (qconnect *addword-ok* "released()" 
          (lambda () (add-this)
            	 (qfun *addword-dialog* "hide")
            	 (setf table-changed t)
            	 (qfun *dict-table* "sortItems" 0)
            	 (qfun *dict-table* "selectRow" selected-row)))
  (qconnect *addword-more* "released()"
	(lambda () (add-this) (qfun *list-add-but* "released")))   
  (qset *addword-name* "tabChangesFocus" t)
  (qset *addword-meaning* "tabChangesFocus" t)
  (qset *addword-example* "tabChangesFocus" t)
  (qoverride *addword-name* "focusInEvent(QFocusEvent*)" (lambda (f) (qfun *addword-name* "selectAll")))
  (qoverride *addword-meaning* "focusInEvent(QFocusEvent*)" (lambda (f) (qfun *addword-meaning* "selectAll")))
  (qoverride *addword-example* "focusInEvent(QFocusEvent*)" (lambda (f) (qfun *addword-example* "selectAll")))
  (if (null *dict*) (load-words))  
  (qset *word-list* "currentRow" 0)
  (qfun *word-list* "setCurrentRow" (qget *word-list* "count"))
  (qconnect *word-list* "currentRowChanged(int)" (lambda  (y) 
                                          	(if (qfun *word-list* "hasFocus")
                                                  	(qset *word-type* "text" (getf (nth y *dict*) :word)))
					(show-meaning y)))
  (qconnect *word-type* "textChanged(QString)" (lambda (k) 
				 (cond ((qfun *word-type* "hasFocus") 
				        (if (= (qget *word-list* "currentRow") -1)
                				  (qset *word-list* "currentRow" 0))
			                  (seek-list)))
                                         (qcall-default)))
 (qconnect *action-edit* "triggered()" (lambda () (qmsg "Edit !")))
 (qconnect *action-delete* "triggered()" (lambda () (qmsg "Delete !")))
 (qoverride *word-list* "contextMenuEvent(QContextMenuEvent*)"
            (lambda (event)
              (qlet ((menu "QMenu(QWidget*)" *word-list*))
                (qfun menu "addAction(QAction*)" *action-edit*)
                (qfun menu "addAction(QAction*)" *action-delete*)
                (qfun menu "exec" (qfun event "globalPos")))))
 (qconnect *dict-table* "cellDoubleClicked(int,int)" 
	(lambda (r c) (setf *tab-edit-row* r) 
		(qset *addword-name* "plainText" (qfun (qfun *dict-table* "item" r 0) "text"))
   		(qset *addword-meaning* "plainText" (qfun (qfun *dict-table* "item" r 1) "text"))
		(qset *addword-example* "plainText" (qfun (qfun *dict-table* "item" r 2) "text"))
   		(setf selected-row r)
   		(setf table-state :editing)
   		(qfun *addword-dialog* "show")
   		(qfun *addword-dialog* "raise")))
 (qconnect *list-save-but* "released()" 'save-dict)
 (qconnect *addword-cancel* "released()" (lambda () (if (eq table-state :adding) (qfun *dict-table* "removeRow" selected-row))
					  (qfun *addword-dialog* "hide")))
 (qconnect *addword-delete* "released()" (lambda () (qfun *dict-table* "removeRow" selected-row) (qfun *addword-dialog* "hide") (setf table-changed t)))
 (qconnect *list-add-but* "released()" (lambda () (let ((rcount (qfun *dict-table* "rowCount")))
					   (qfun *dict-table* "insertRow" rcount)
	                                           (setf *tab-edit-row* rcount)
                                                     (qset *addword-name* "plainText" "Word")
                                                     (qset *addword-meaning* "plainText" "Meaning")
                                                     (qset *addword-example* "plainText" "Example")
                                                     (setf table-state :adding) (setf selected-row rcount)
                                                     (qfun *addword-dialog* "show"))))
 (qconnect *window* "currentChanged(int)" 
	(lambda (p) 
	    (if (and (= cur-tab 1) table-changed)
         		(qlet ((msg "QMessageBox(QWidget*)" *window*))
             	   (qfun msg "setText" "Save table ?")
             	   (qfun msg "setStandardButtons" (boole boole-ior |QMessageBox.Save| (boole boole-ior |QMessageBox.Discard| |QMessageBox.Cancel|)))
             	   (qfun msg "setDefaultButton(QMessageBox::StandardButton)" |QMessageBox.Save|)
             	   (let ((ret (qfun msg "exec")))
                   	       (cond ((= ret |QMessageBox.Cancel|) (qset *window* "currentIndex" cur-tab))
				     (t (cond ((= ret |QMessageBox.Save|) (save-dict)))
					(setf table-changed nil)
					(load-words :no-load-table t))))))
	    (if (= p 2) (load-test))
	    (setf cur-tab p)))
 (qoverride *lay-widg1* "actionEvent(QActionEvent*)" (lambda (a) (qmsg "called !") (qcall-default)))
 (qconnect *test-wronged* "released()" (lambda () (test-next t)))
 (qoverride *lay-widg2* "keyReleaseEvent(QKeyEvent*)" (lambda (l) 
 	(let ((l (qfun l "key")))
  	   (if (= l 1677720) (test-next nil)) (and (>= l 49) (<= l 54) (qfun *test-meaning-group* "buttonReleased(int)" (- l 49))))))
 (qconnect *test-next* "released()" (lambda () (test-next nil)))
 
 (qfun *mainwindow* "setCentralWidget" *window*)
 (setf *statusbar* (qfun *mainwindow* "statusBar"))
 (qset *status-label* "text" "by Sankho Turjo Sarkar")
 (qfun *statusBar* "addWidget" *status-label* 1)
 (qfun *mainwindow* "setWindowTitle" "Dictionary")
 (x:do-with (qfun *mainwindow*)
   "show" "raise")))
  
(defun load-words (&key no-load-dict no-load-table)
  (if (not no-load-dict)
    (setf *dict*  
      (let ((collect))
        (qfun *word-list* "clear")
        (with-open-file (file "diction.txt" :direction :input)
	(loop
	  (let ((x (read file nil)))
;     		(format t "Read word: ~D" (getf x :word))
		(if (not x) (return)
		    (push x collect)))))
               (sort collect #'string< :key #'second)))0)
  (and (not no-load-dict) no-load-table
       (loop for i in *dict* do
      	      (qfun *word-list* "addItem(QString)" (getf i :word))))
  (if (not no-load-table)
      (progn 
	(qfun *dict-table* "setRowCount" (length *dict*))
	(qfun *dict-table* "setColumnCount" 3)
	(qfun *dict-table* "setHorizontalHeaderLabels" (list "Word" "Meaning" "Example"))
  	(loop for i in *dict* and j from 0 to (1- (length *dict*)) do
    	    (let ((new-word (qnew "QTableWidgetItem(QString)" (getf i :word)))
          	(new-meaning (qnew "QTableWidgetItem(QString)" (getf i :meaning)))
          	(new-example (qnew "QTableWidgetItem(QString)" (if (> (length i) 2) (getf i :example) ""))))
                (qfun *word-list* "addItem(QString)" (getf i :word))
      	      (qfun *dict-table* "setItem" j 0 new-word)
      	      (qfun *dict-table* "setItem" j 1 new-meaning)
      	      (qfun *dict-table* "setItem" j 2 new-example)))
      	(qfun *dict-table* "setColumnWidth" 0 100)
      	(qfun *dict-table* "setColumnWidth" 1 400)
      	(qfun *dict-table* "setColumnWidth" 2 500)  
      	(qfun *dict-table* "sortItems" 0)))
  (setf *words* (mapcar (lambda (L) (getf L :WORD)) *dict*))
  (setf *suggest* (qnew "QCompleter(QStringList)" *words*))
  (qfun *suggest* "setCaseSensitivity" |Qt.CaseInsensitive|)
  (qfun *word-type* "setCompleter" *suggest*))

(defun show-meaning (n)
  (qset *word-meaning* "text"
        (if (< n 0) ""
     	  (let ((xx (nth n *dict*)))
       		(concatenate 'string "<font size= 20><b>" (getf xx :word) "</b></font><br><br>" (getf xx :meaning)
           	(if (> (length xx) 2) (format nil "<br><br><i>~D</i>" (getf xx :example))))))))

(let ((to-be-added))
(defun seek-list ()
  (let ((txt (qget *word-type* "text"))(outside))
    (labels ((word-at (n) (getf (nth n *dict*) :word))
             (similar (t1 t2)
               (string-equal t1 t2 :end2 (min (length t1) (length t2))))
	     (similarText (t2)
               (similar txt t2)))
;      (with-open-file (myfile "seekdeb.txt" :direction :output :if-exists :append :if-does-not-exist :create)
      (let ((myfile))
	(let ((cw (qget *word-list* "currentRow"))(ccw))
	  (format myfile "~%word= ~D, crow= ~D " txt cw)
	  (if (= cw -1) (qset *word-list* "currentRow"0))

	  (loop until (or (>= cw (1- (qget *word-list* "count"))) 
			  (string-greaterp (word-at (1+ cw)) txt))
	     do (progn (format myfile "< 1. got ~D @ ~D, going down >" (word-at (1+ cw)) (1+ cw)) (incf cw)))

	  (format myfile "< Similarity with: ~D, ~D= ~D >" (word-at (1+ cw)) txt (similar txt (word-at (1+ cw)) ))

	  (loop until (or (>= cw (1- (qget *word-list* "count")))
			  (not (similar txt (word-at (1+ cw)) )))
	     do (progn (format myfile "< 2. similar ~D @ ~D, going down >" (word-at (1+ cw)) (1+ cw)) (incf cw)))

	  (loop until (or (<= cw 0) 
			  (string-lessp (word-at (1- cw)) txt))
	     do (progn (format myfile "< 3. got ~D @ ~D, going up >" (word-at (1- cw)) (1- cw)) (decf cw)))

	  (qset *word-list* "currentRow" cw)))
      '(qfun *word-type* "selectAll")
      '(if outside (qfun *word-type* "setTextColor" |Qt.red|)
                  (qfun *word-type* "setTextColor" |Qt.black|))
      '(qfun *word-type* "moveCursor" |QTextCursor.E ndOfWord| |QTextCursor.KeepAnchor|)
      (setf to-be-added outside))))
  (defun display-add-word (word)
    (if to-be-added
    	(qset *addword-name* "text" word)
	(x:do-with (qfun *addword-dialog*)     	
		"show" "raise"))
    ))
      
(defun add-word (w m e)
  (push `(,w ,m ,e) *dict*)
  (with-open-file (file "diction.txt" :direction :output :if-exists :append :if-does-not-exist :create)
    (format file "~%\"~D\" \"~D\" \"~D\"" w m e))
  (qfun *word-list* "addItem(QString)" w))

(defun csv-parse (csv-str &optional words new-word)
	   (if (not (listp csv-str)) 
	       (csv-parse (coerce csv-str 'list))
	       (if (null csv-str)
		   (nconc words (list new-word))
		   (if (eq (first csv-str) #\;)
		       (csv-parse (rest csv-str) (nconc words (list new-word)) "")
		       (csv-parse (rest csv-str) words (concatenate 'string new-word (string (first csv-str))))))))

(defun choose-any (csv-str)
  (let ((str (csv-parse csv-str)))
    (nth (random (length str)) str)))
  
(defun save-dict (&optional (fname "diction.txt"))
  (macrolet ((string-at (r c)
               `(qfun (qfun *dict-table* "item" ,r ,c) "text")))
  	(with-open-file (file fname :direction :output :if-exists :supersede :if-does-not-exist :create)
  		(loop for i from 0 to (1- (qfun *dict-table* "rowCount")) do
    			(print (list :word (string-at i 0) :meaning (string-at i 1) :example (string-at i 2)) file)
               		(format file "~%")
               ))))
	   
(defun start ()
  (orient)
  (load-me))

(start)
